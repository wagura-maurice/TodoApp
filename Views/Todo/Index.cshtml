@using TodoApp.ViewModels
@model TodoListViewModel

@{
    ViewData["Title"] = "My Todo List";
    var hasSuccessMessage = TempData["SuccessMessage"] != null;
    var hasErrorMessage = TempData["ErrorMessage"] != null;
}

<div class="container py-5">
    <div class="row justify-content-center">
        <div class="col-lg-8">
            
            <div class="card shadow-sm">
                <div class="card-header bg-primary text-white">
                    <h2 class="h5 mb-0">My Todo List</h2>
                </div>
                
                <div class="card-body">
                    <form asp-action="Create" method="post" class="mb-4" id="todo-form" onsubmit="return submitTodoForm(event)">
                        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                        <div class="input-group">
                            <input asp-for="NewTodoTitle" class="form-control form-control-lg" 
                                   placeholder="What needs to be done?" required>
                            <button type="submit" class="btn btn-primary">
                                <i class="bi bi-plus-lg"></i> Add
                            </button>
                        </div>
                        <div class="mt-2">
                            <textarea asp-for="NewTodoDescription" class="form-control" rows="2" 
                                     placeholder="Description (optional)"></textarea>
                            <span asp-validation-for="NewTodoTitle" class="text-danger"></span>
                        </div>
                    </form>

                    <div class="list-group" id="todo-list">
                        @if (!Model.Todos.Any())
                        {
                            <div class="text-center py-4 text-muted">
                                <i class="bi bi-check2-circle display-4 d-block mb-2"></i>
                                <h5>No tasks yet</h5>
                                <p class="mb-0">Add a task to get started!</p>
                            </div>
                        }
                        else
                        {
                            foreach (var item in Model.Todos)
                            {
                                <div class="list-group-item list-group-item-action @(item.IsCompleted ? "bg-light" : "")">
                                    <div class="d-flex align-items-center">
                                        <form asp-action="ToggleComplete" method="post" class="me-2 toggle-complete-form" data-id="@item.Id">
                                            <input type="hidden" name="id" value="@item.Id" />
                                            <button type="button" class="btn btn-sm btn-outline-success border-0 p-0 me-2 toggle-complete-btn" 
                                                    data-bs-toggle="tooltip" title="Toggle Complete"
                                                    data-title="@item.Title">
                                                <i class="bi @item.StatusIcon" style="font-size: 1.5rem;"></i>
                                            </button>
                                        </form>
                                        <div class="flex-grow-1">
                                            <h5 class="mb-1 @(item.IsCompleted ? "text-muted text-decoration-line-through" : "")">
                                                @item.Title
                                            </h5>
                                            @if (!string.IsNullOrEmpty(item.Description))
                                            {
                                                <p class="mb-1 small text-muted">@item.Description</p>
                                            }
                                            <div class="d-flex align-items-center mt-1">
                                                <small class="text-muted me-2">
                                                    <i class="bi bi-calendar3"></i> 
                                                    @item.CreatedAtFormatted
                                                    @if (item.IsCompleted && item.CompletedAt.HasValue)
                                                    {
                                                        <span class="ms-2">
                                                            <i class="bi bi-check2-all text-success"></i>
                                                            @item.CompletedAtFormatted
                                                        </span>
                                                    }
                                                </small>
                                                
                                                @if (!string.IsNullOrEmpty(item.AuthorName))
                                                {
                                                    <div class="d-flex align-items-center ms-2" data-bs-toggle="tooltip" title="@item.AuthorName">
                                                        <div class="avatar-sm me-1" style="width: 20px; height: 20px; background-color: #6c757d; color: white; border-radius: 50%; display: flex; align-items: center; justify-content: center; font-size: 0.6rem; font-weight: bold;">
                                                            @item.AuthorInitials
                                                        </div>
                                                        <small class="text-muted">@item.AuthorName</small>
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                        <form asp-action="Delete" method="post" class="ms-2 delete-form" data-id="@item.Id">
                                            <input type="hidden" name="id" value="@item.Id" />
                                            <button type="button" class="btn btn-sm btn-outline-danger delete-btn" 
                                                    data-bs-toggle="tooltip" title="Delete"
                                                    data-title="@item.Title">
                                                <i class="bi bi-trash"></i>
                                            </button>
                                        </form>
                                    </div>
                                </div>
                            }
                        }
                    </div>
                </div>
                
                @if (Model.Todos.Any())
                {
                    <div class="card-footer bg-light d-flex justify-content-between align-items-center flex-wrap">
                        <small class="text-muted mb-2 mb-md-0">
                            @Model.ActiveCount @(Model.ActiveCount == 1 ? "item" : "items") left
                        </small>
                        <div class="btn-group" role="group" aria-label="Todo filters">
                            <a asp-action="Index" asp-route-filter="" 
                               class="btn btn-sm @(string.IsNullOrEmpty(Model.Filter) ? "btn-primary" : "btn-outline-secondary") ">
                                All
                            </a>
                            <a asp-action="Index" asp-route-filter="active" 
                               class="btn btn-sm @(Model.Filter == "active" ? "btn-primary" : "btn-outline-secondary") ">
                                Active
                            </a>
                            <a asp-action="Index" asp-route-filter="completed" 
                               class="btn btn-sm @(Model.Filter == "completed" ? "btn-primary" : "btn-outline-secondary") ">
                                Completed
                            </a>
                        </div>
                        @if (Model.CompletedCount > 0)
                        {
                            <form asp-action="ClearCompleted" method="post" class="ms-md-2 mt-2 mt-md-0">
                                <button type="submit" class="btn btn-sm btn-outline-danger">
                                    Clear completed (@Model.CompletedCount)
                                </button>
                            </form>
                        }
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@section Styles {
    <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" rel="stylesheet">
}

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        // Enable Bootstrap tooltips with null check
        document.addEventListener('DOMContentLoaded', function() {
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                if (tooltipTriggerEl) {
                    return new bootstrap.Tooltip(tooltipTriggerEl);
                }
                return null;
            }).filter(Boolean); // Remove any null entries
        });

        // Auto-focus the title input when the page loads
        document.addEventListener('DOMContentLoaded', function() {
            try {
                const titleInput = document.querySelector('#NewTodoTitle');
                if (titleInput) {
                    titleInput.focus();
                }

                // Clear any existing validation messages when the form is submitted
                const form = document.querySelector('#todo-form');
                if (form) {
                    form.addEventListener('submit', function() {
                        const validationMessages = form.querySelectorAll('.field-validation-error');
                        if (validationMessages && validationMessages.length > 0) {
                            validationMessages.forEach(function(element) {
                                if (element && element.textContent) {
                                    element.textContent = '';
                                }
                            });
                        }
                    });
                }
            } catch (error) {
                console.error('Error in DOMContentLoaded handler:', error);
            }
        });

        // Handle escape key to clear input
        document.addEventListener('keydown', function(e) {
            try {
                if (e.key === 'Escape') {
                    const activeElement = document.activeElement;
                    if (activeElement && (activeElement.tagName === 'INPUT' || activeElement.tagName === 'TEXTAREA')) {
                        activeElement.value = '';
                    }
                }
            } catch (error) {
                console.error('Error in keydown handler:', error);
            }
        });

        // Initialize Toast with error handling
        let Toast;
        try {
            if (window.Swal) {
                Toast = Swal.mixin({
                    toast: true,
                    position: 'top-end',
                    showConfirmButton: false,
                    timer: 3000,
                    timerProgressBar: true,
                    didOpen: (toast) => {
                        try {
                            if (toast) {
                                toast.onmouseenter = Swal.stopTimer;
                                toast.onmouseleave = Swal.resumeTimer;
                            }
                        } catch (e) {
                            console.error('Error in Toast didOpen:', e);
                        }
                    }
                });
            } else {
                console.warn('SweetAlert2 (Swal) is not loaded. Toasts will not work.');
                // Fallback to console logging
                Toast = {
                    fire: function(options) {
                        console.log('Toast:', options.title || options.text || 'Notification');
                        return Promise.resolve({ isConfirmed: true });
                    }
                };
            }
        } catch (e) {
            console.error('Error initializing Toast:', e);
            // Fallback to console logging if Toast initialization fails
            Toast = {
                fire: function(options) {
                    console.log('Toast (fallback):', options.title || options.text || 'Notification');
                    return Promise.resolve({ isConfirmed: true });
                }
            };
        }

        // Show success/error message from TempData if exists
        try {
            @if (hasSuccessMessage)
            {
                <text>
                if (Toast) {
                    try {
                        Toast.fire({
                            icon: 'success',
                            title: '@Html.Raw(TempData["SuccessMessage"])'
                        });
                    } catch (e) {
                        console.error('Error showing success toast:', e);
                    }
                } else {
                    console.log('Success:', '@Html.Raw(TempData["SuccessMessage"])');
                }
                </text>
            }
            else if (hasErrorMessage)
            {
                <text>
                if (Toast) {
                    try {
                        Toast.fire({
                            icon: 'error',
                            title: '@Html.Raw(TempData["ErrorMessage"])'
                        });
                    } catch (e) {
                        console.error('Error showing error toast:', e);
                    }
                } else {
                    console.error('Error:', '@Html.Raw(TempData["ErrorMessage"])');
                }
                </text>
            }
        } catch (e) {
            console.error('Error processing TempData messages:', e);
        }

        // Handle todo form submission with AJAX
        function submitTodoForm(event) {
            try {
                event.preventDefault();
                const form = event.target;
                if (!form || !form.action) {
                    console.error('Form is invalid');
                    return false;
                }
                
                const formData = new FormData(form);
                const submitButton = form.querySelector('button[type="submit"]');
                if (!submitButton) {
                    console.error('Submit button not found');
                    return false;
                }
                
                const tokenElement = document.querySelector('input[name="__RequestVerificationToken"]');
                if (!tokenElement) {
                    console.error('Anti-forgery token not found');
                    return false;
                }
                
                // Disable the submit button to prevent double submission
                const originalButtonText = submitButton.innerHTML;
                submitButton.disabled = true;
                submitButton.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Adding...';
                
                fetch(form.action, {
                    method: 'POST',
                    body: formData,
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest',
                        'RequestVerificationToken': tokenElement.value
                    }
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    if (!data) {
                        throw new Error('No data received from server');
                    }
                    
                    if (data.success) {
                        // Show success toast
                        if (window.Swal) {
                            Swal.fire({
                                toast: true,
                                position: 'top-end',
                                icon: 'success',
                                title: data.message || 'Todo added successfully!',
                                showConfirmButton: false,
                                timer: 3000
                            });
                        }
                        
                        // Clear the form
                        form.reset();
                        
                        // Reload after a short delay to show the toast
                        setTimeout(() => {
                            window.location.reload();
                        }, 1500);
                    } else {
                        // Show error toast
                        const errorMsg = data.message || 'An error occurred.';
                        console.error('Server error:', errorMsg);
                        
                        if (window.Swal) {
                            Swal.fire({
                                toast: true,
                                position: 'top-end',
                                icon: 'error',
                                title: errorMsg,
                                showConfirmButton: false,
                                timer: 5000
                            });
                        } else {
                            alert(errorMsg);
                        }
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    const errorMsg = error instanceof Error ? error.message : 'An unknown error occurred';
                    
                    if (window.Swal) {
                        Swal.fire({
                            toast: true,
                            position: 'top-end',
                            icon: 'error',
                            title: `Error: ${errorMsg}`,
                            showConfirmButton: false,
                            timer: 5000
                        });
                    } else {
                        alert(`Error: ${errorMsg}`);
                    }
                })
                .finally(() => {
                    // Re-enable the submit button
                    if (submitButton) {
                        submitButton.disabled = false;
                        submitButton.innerHTML = originalButtonText;
                    }
                });
                
                return false;
            } catch (error) {
                console.error('Error in submitTodoForm:', error);
                if (window.Swal) {
                    Swal.fire({
                        icon: 'error',
                        title: 'An error occurred',
                        text: error.message || 'Please try again.'
                    });
                } else {
                    alert('An error occurred: ' + (error.message || 'Please try again.'));
                }
                return false;
            }
        }

        // Function to initialize toggle buttons
        function initializeToggleButtons() {
            const toggleButtons = document.querySelectorAll('.toggle-complete-btn');
            if (!toggleButtons || toggleButtons.length === 0) return;
            
            toggleButtons.forEach(button => {
                if (!button) return;
                
                // Remove any existing event listeners to prevent duplicates
                const newButton = button.cloneNode(true);
                button.parentNode.replaceChild(newButton, button);
                
                newButton.addEventListener('click', async function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    
                    const form = this.closest('form');
                    if (!form || !form.action) {
                        console.error('Form is invalid');
                        return;
                    }
                    
                    const todoTitle = this.getAttribute('data-title') || 'this todo item';
                    const icon = this.querySelector('i');
                    
                    // Store original state for potential rollback
                    const originalHtml = this.innerHTML;
                    const originalIconClass = icon ? icon.className : '';
                    const todoItem = this.closest('.list-group-item');
                    const titleElement = todoItem ? todoItem.querySelector('h5') : null;
                    const wasCompleted = todoItem ? todoItem.classList.contains('completed') : false;
                    
                    // Immediately update the UI for instant feedback
                    if (icon) {
                        icon.className = wasCompleted ? 'bi bi-circle' : 'bi bi-check-circle-fill text-success';
                    }
                    if (titleElement) {
                        if (wasCompleted) {
                            titleElement.classList.remove('text-muted', 'text-decoration-line-through');
                        } else {
                            titleElement.classList.add('text-muted', 'text-decoration-line-through');
                        }
                    }
                    if (todoItem) {
                        todoItem.classList.toggle('completed', !wasCompleted);
                    }
                    
                    // Show loading state
                    this.disabled = true;
                
                try {
                    const tokenElement = document.querySelector('input[name="__RequestVerificationToken"]');
                    if (!tokenElement) {
                        throw new Error('Anti-forgery token not found');
                    }

                    // Store the current state for potential rollback
                    const currentState = !wasCompleted;
                    
                    const response = await fetch(form.action, {
                        method: 'POST',
                        body: new FormData(form),
                        headers: {
                            'X-Requested-With': 'XMLHttpRequest',
                            'RequestVerificationToken': tokenElement.value
                        }
                    });
                    
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    
                    const data = await response.json();
                    
                    if (!data) {
                        throw new Error('Empty response from server');
                    }
                    
                    if (data.success) {
                        // Only update tooltip and other non-state related UI elements
                        const todoItem = this.closest('.list-group-item');
                        if (todoItem) {
                            // Update the status text
                            const statusText = data.isCompleted ? 'Mark as incomplete' : 'Mark as complete';
                            this.setAttribute('title', statusText);
                            this.setAttribute('data-original-title', statusText);
                            
                            // Update Bootstrap tooltip if it exists
                            if (typeof bootstrap !== 'undefined') {
                                const tooltip = bootstrap.Tooltip.getInstance(this);
                                if (tooltip) {
                                    tooltip.dispose();
                                    new bootstrap.Tooltip(this);
                                }
                            }
                            
                            // Show success message (only if state changed)
                            if (currentState !== data.isCompleted) {
                                if (window.Swal) {
                                    try {
                                        Swal.fire({
                                            toast: true,
                                            position: 'top-end',
                                            icon: 'success',
                                            title: data.message || 'Todo updated successfully!',
                                            showConfirmButton: false,
                                            timer: 3000
                                        });
                                    } catch (e) {
                                        console.error('Error showing success toast:', e);
                                    }
                                }
                            }
                            
                            // Update Bootstrap tooltip if it exists
                            if (typeof bootstrap !== 'undefined') {
                                const tooltip = bootstrap.Tooltip.getInstance(this);
                                if (tooltip) {
                                    tooltip.dispose();
                                    new bootstrap.Tooltip(this);
                                }
                            }
                        }
                    } else {
                        // Show error message
                        const errorMsg = data.message || 'Failed to update todo status.';
                        console.error('Server error:', errorMsg);
                        if (window.Swal) {
                            try {
                                Swal.fire({
                                    toast: true,
                                    position: 'top-end',
                                    icon: 'error',
                                    title: errorMsg,
                                    showConfirmButton: false,
                                    timer: 5000
                                });
                            } catch (e) {
                                console.error('Error showing error toast:', e);
                            }
                        } else {
                            alert(errorMsg);
                        }
                    }
                } catch (error) {
                    console.error('Error:', error);
                    const errorMsg = error instanceof Error ? error.message : 'An unknown error occurred';
                    
                    // Revert UI changes on error
                    if (icon) icon.className = originalIconClass || 'bi bi-circle';
                    if (titleElement) {
                        if (wasCompleted) {
                            titleElement.classList.add('text-muted', 'text-decoration-line-through');
                        } else {
                            titleElement.classList.remove('text-muted', 'text-decoration-line-through');
                        }
                    }
                    if (todoItem) {
                        todoItem.classList.toggle('completed', wasCompleted);
                    }
                    
                    // Show error message
                    if (Toast) {
                        try {
                            Toast.fire({
                                icon: 'error',
                                title: `Error: ${errorMsg}`
                            });
                        } catch (e) {
                            console.error('Error showing error toast:', e);
                        }
                    } else {
                        alert(`Error: ${errorMsg}`);
                    }
                } finally {
                    try {
                        // Restore button state
                        if (this) {
                            this.innerHTML = originalHtml;
                            this.disabled = false;
                        }
                    } catch (restoreError) {
                        console.error('Error restoring button state:', restoreError);
                    }
                }
            });
            });
        }

        // Function to initialize delete buttons
        function initializeDeleteButtons() {
            const deleteButtons = document.querySelectorAll('.delete-btn');
            if (!deleteButtons || deleteButtons.length === 0) return;
            
            deleteButtons.forEach(button => {
                if (!button) return;
                
                // Remove any existing event listeners to prevent duplicates
                const newButton = button.cloneNode(true);
                button.parentNode.replaceChild(newButton, button);
                
                newButton.addEventListener('click', function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    
                    const form = this.closest('form');
                    const todoTitle = this.getAttribute('data-title') || 'this todo item';
                    
                    if (window.Swal) {
                        Swal.fire({
                            title: 'Are you sure?',
                            text: `You are about to delete "${todoTitle}". This action cannot be undone!`,
                            icon: 'warning',
                            showCancelButton: true,
                            confirmButtonColor: '#3085d6',
                            cancelButtonColor: '#d33',
                            confirmButtonText: 'Yes, delete it!',
                            cancelButtonText: 'Cancel',
                            reverseButtons: true
                        }).then((result) => {
                            if (result.isConfirmed && form) {
                                form.submit();
                            }
                        });
                    } else if (confirm(`Are you sure you want to delete "${todoTitle}"?`)) {
                        form?.submit();
                    }
                });
            });
        }
        
        // Initialize all event listeners when the DOM is fully loaded
        document.addEventListener('DOMContentLoaded', function() {
            initializeToggleButtons();
            initializeDeleteButtons();
            
            // Re-initialize buttons after AJAX operations
            document.addEventListener('todoListUpdated', function() {
                initializeToggleButtons();
                initializeDeleteButtons();
            });
        });
    </script>
}
